server:
  port: 8092

spring:
  application:
    name: person-service
  datasource:
    url: jdbs:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:4535}/${POSTGRES_DB:person}
    password: ${POSTGRES_PASSWORD:postgres}
    username: ${POSTGRES_USER:postgres}
    driver-class-name: org.postgresql.Driver
  flyway:
    enabled: true
    validate-on-migrate: true
    baseline-on-migrate: true
    locations: classpath:db/migration
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: validate
    properties:
      org.hibernate:
        envers:
          # Default behavior
          autoRegisterListeners: true
          # String that will be appended to the name of an audited entity to create the name of the entity and that will hold audit information.
          # If you audit an entity with a table name Person, in the default setting Envers will generate a Person_AUD table to store historical data.
          audit_table_suffix: _history
          # The default schema name that should be used for audit tables.
          # Can be overridden using the @AuditTable( schema = "??" ) annotation.
          # If not present, the schema will be the same as the schema of the table being audited.
          default_schema: person_history
          # Should the entity data be stored in the revision when the entity is deleted (instead of only storing the id and all other properties as null).
          # This is not normally needed, as the data is present in the last-but-one revision. Sometimes, however, it is easier and more efficient to access it in the last revision (then the data that the entity contained before deletion is stored twice).
          store_data_at_delete: true
          # Name of a field in the audit entity that will hold the revision number.
          revision_field_name: revision
          # Name of a field in the audit entity that will hold the type of the revision (currently, this can be: add, mod, del).
          revision_type_field_name: revision_type
      hibernate:
        default_schema: person
        show_sql: ${HIBERNATE_SHOW_SQL:true}
        format_sql: ${HIBERNATE_FORMAT_SQL:true}
        highlight_sq: ${HIBERNATE_HIGHLIGHT_SQL:true}
        # Print slow queries
        session.events.log.LOG_QUERIES_SLOWER_THAN_MS: ${SLOW_SQL_QUERY_INDICATOR_MS:1500}
        # It translates your Hibernate mappings (annotations or XML) into corresponding SQL statements to create, update, or validate your database schema.
        hbm2ddl:
          auto: validate
    database-platform: org.hibernate.dialect.PostgreSQLDialect

management:
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
  endpoint:
    prometheus:
      access: read_only
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    enabled: true
    sampling:
      probability: 1.0

otel:
  exporter:
    otlp:
      # Grafana Alloy
      endpoint: ${OTLP_EXPORTER_ENDPOINT:http://localhost:4318}
      # Uses protobuf just for payload serialization
      protocol: http/protobuf
  logs:
    exporter: none
  metrics:
    exporter: none

logging:
  # Use custom formatting XML-based config
  config: "classpath:logback.xml"